# -*- coding: utf-8 -*-
# Generated by Django 1.10.8 on 2018-09-03 13:55
from __future__ import unicode_literals

from django.db import migrations


def copy_org_to_party(apps, schema_editor):
    """
    This one is a little fiddly.

    We want to assign a Party object to each Membership.

    Currently the "party" is an Organization object with a classification of
    `Party`. The identifier for the party is a generic relation to Identifier.

    Because of the way that Django's `apps.get_model` works, it prevents
    GenericRelations from working in migrations. This means we need
    to construct some of the relation ourselves.

    This looks like:

    1. Get the content type ID for Organization
    2. Get all Identifier objects with that content type and the scheme
       "electoral-commission"
    3. Construct a lookup map with the party ID as the key and the Organization
       object ID as the value
    4. Then, to save on queries, construct a map of party IDs to party objects
    5. Iterate over all parties, get the organisation ID from the first map
       and then get the party object from the second map.
    6. Filter Membership objects by the organisation object ID and update it
       with the party object.

    Note that this migration doesn't remove any data, just copies it in to a
    different format / model / field.
    """
    Membership = apps.get_model("popolo", "Membership")
    Party = apps.get_model("parties", "Party")
    Organization = apps.get_model("popolo", "Organization")
    Identifier = apps.get_model("popolo", "Identifier")
    ContentType = apps.get_model("contenttypes", "ContentType")

    organization_content_type_id = ContentType.objects.get_for_model(
        Organization
    ).pk

    EC_IDS_TO_ORG_PK = {}
    org_ids_qs = Identifier.objects.filter(
        content_type_id=organization_content_type_id,
        scheme="electoral-commission",
    )
    for identifier in org_ids_qs:
        EC_IDS_TO_ORG_PK[identifier.identifier] = identifier.object_id

    ec_id_to_party_obj = {}
    for party in Party.objects.all():
        ec_id_to_party_obj[party.ec_id] = party

    for ec_id, party_obj in ec_id_to_party_obj.items():
        # Get the org ID from the party ID
        org = EC_IDS_TO_ORG_PK.get(ec_id)
        if not org:
            continue

        # Update the memberships for this org
        Membership.objects.filter(on_behalf_of_id=org).update(party=party_obj)


class Migration(migrations.Migration):

    dependencies = [("popolo", "0014_membership_party")]

    operations = [
        migrations.RunPython(copy_org_to_party, migrations.RunPython.noop)
    ]
